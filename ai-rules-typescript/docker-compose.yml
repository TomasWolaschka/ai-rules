version: '3.8'

services:
  # Redis for queue management and caching
  redis:
    image: redis:7-alpine
    container_name: ai-rules-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-rules-network

  # Main AI Rules Management application
  ai-rules-app:
    build: .
    container_name: ai-rules-management
    restart: unless-stopped
    ports:
      - "3000:3000"   # HTTP server
      - "8080:8080"   # WebSocket notifications
      - "9090:9090"   # Metrics endpoint
    volumes:
      - ./ai-rules:/app/ai-rules:ro           # Rule files (read-only)
      - rules_archive:/app/archive            # Rule archives (persistent)
      - rules_metadata:/app/metadata          # Rule metadata (persistent)
      - app_logs:/app/logs                    # Application logs (persistent)
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - CLAUDE_PROJECT_DIR=/app
      - RULE_BASE_PATH=/app/ai-rules
      - ARCHIVE_PATH=/app/archive
      - METADATA_PATH=/app/metadata
      - LOG_LEVEL=info
      - UPDATE_FREQUENCY_MONTHS=6
      - ARCHIVE_RETENTION_MONTHS=24
      - MAX_CONCURRENT_GENERATIONS=3
      - RULE_GENERATION_TIMEOUT_MS=300000
      - WEB_SCRAPING_TIMEOUT_MS=30000
      - MAX_PAGES_PER_SEARCH=10
      - METRICS_COLLECTION_INTERVAL_MS=5000
      - HEALTH_CHECK_INTERVAL_MS=60000
      - RATE_LIMIT_PER_HOUR=100
      - MAX_WEBSOCKET_CLIENTS=100
      # API keys (set these in .env file or environment)
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - BRAVE_SEARCH_API_KEY=${BRAVE_SEARCH_API_KEY:-}
      - STACKOVERFLOW_API_KEY=${STACKOVERFLOW_API_KEY:-}
      - JWT_SECRET=${JWT_SECRET:-default-secret-change-in-production}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ai-rules-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-rules-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - ai-rules-network
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-rules-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus
    networks:
      - ai-rules-network
    profiles:
      - monitoring

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ai-rules-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
      # SSL certificates (if using HTTPS)
      # - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - ai-rules-app
    networks:
      - ai-rules-network
    profiles:
      - proxy

volumes:
  redis_data:
    driver: local
  rules_archive:
    driver: local
  rules_metadata:
    driver: local
  app_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  ai-rules-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16